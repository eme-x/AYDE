#include <iostream>
#include <vector>
#include <stack>
#include <cmath>

// Estructura para representar un punto en 2D
struct Point {
    double x, y;
    Point(double x, double y) : x(x), y(y) {}
};

// Función para calcular la distancia entre dos puntos
double distance(Point p1, Point p2) {
    double dx = p1.x - p2.x;
    double dy = p1.y - p2.y;
    return std::sqrt(dx * dx + dy * dy);
}

// Función para calcular el perímetro de un polígono
double calcularPerimetro(const std::vector<Point>& polygon) {
    int n = polygon.size();
    double perimetro = 0.0;

    for (int i = 0; i < n; i++) {
        perimetro += distance(polygon[i], polygon[(i + 1) % n]);
    }

    return perimetro;
}

int main() {
    std::vector<Point> polygon;
    std::stack<Point> polygonStack; // Usaremos una pila para el polígono

    char continuar = 'y';

    while (continuar == 'y' || continuar == 'Y') {
        double x, y;
        std::cout << "Ingrese las coordenadas x e y del punto: ";
        std::cin >> x >> y;

        Point punto(x, y);
        polygonStack.push(punto); // Agregar el punto a la pila
        polygon.push_back(punto); // Agregar el punto al polígono

        std::cout << "¿Desea agregar otro punto? (y/n): ";
        std::cin >> continuar;
    }

    int lados = polygon.size();
    double perimetro = calcularPerimetro(polygon);

    std::cout << "El polígono tiene " << lados << " lados." << std::endl;
    std::cout << "El perímetro del polígono es: " << perimetro << std::endl;

    // Puedes acceder a los puntos en el orden inverso (desapilar) si es necesario
    std::cout << "Puntos del polígono en orden inverso (desde la pila):" << std::endl;
    while (!polygonStack.empty()) {
        Point punto = polygonStack.top();
        std::cout << "(" << punto.x << ", " << punto.y << ")" << std::endl;
        polygonStack.pop();
    }

    return 0;
}
